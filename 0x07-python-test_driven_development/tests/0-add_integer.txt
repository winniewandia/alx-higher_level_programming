This library contains one function called ``add_integer``

``add_integer`` checks if a and b are floats. If they are,
it casts them into integers
Importing the function
    >>> add_integer = __import__('0-add_integer').add_integer

Adding 2 floats
    >>> add_integer(1.3, 2.4)
    3

Adding float to int
    >>> add_integer(1.3, 2)
    3

Adding int to float
    >>> add_integer(2, 5.1)
    7

integers
========
``add_integer`` checks if the numbers are integers, if they
are not it raises TypeError. If the numbers are integers,
it adds them together to return an integer.
Adding 2 strings
    >>> add_integer('h', 'e')
    Traceback (most recent call last):
    TypeError: a must be an integer

Adding 2 integers
    >>> add_integer(4, 5)
    9

Adding string to int
    >>> add_integer('h', 1)
    Traceback (most recent call last):
    TypeError: a must be an integer

Adding int to string
    >>> add_integer(2, 'e')
    Traceback (most recent call last):
    TypeError: b must be an integer

Adding none
    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

Addding a tuple
    >>> add_integer((2, 2))
    Traceback (most recent call last):
    TypeError: a must be an integer

Passing a string
    >>> add_integer("amazing")
    Traceback (most recent call last):
    TypeError: a must be an integer

Adding number and list
    >>> add_integer(4, [])
    Traceback (most recent call last):
    TypeError: b must be an integer

Adding positive and -ve
    >>> add_integer(100, -3)
    97

Case NaN
    >>> add_integer(1, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

Overflow for 1 number
    >>> add_integer(float('inf'), 1)
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

Overflow for +ve and -ve
    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
